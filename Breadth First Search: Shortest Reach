#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
using namespace std;
#define infinite 1000000000
vector <int> edge[100],cost[100];
int bfs(int source,int destination){
	queue<int>q;
	q.push(source);
	int d[100];
	for(int i=0; i<100; i++)
		d[i] = infinite;
	d[source] = 0;
	while(!q.empty()){
		int u = q.front();
		q.pop();
		int ucost = d[u];
		for(int i =0; i<edge[u].size(); i++){
			int v = edge[u][i];
			int vcost = cost[u][i] + ucost;
			if(d[v]>vcost){
				d[v]=vcost;
				q.push(v);
			}

		}

	}
	 if(d[destination]==infinite)
	 d[destination]=-1;

		return d[destination];


}
int main()
{
	int t,N,E,source,destination,minimum_distance[1000];
	cin>>t;
	while(t--){
                cin>>N>>E;
            for(int i=0; i<E; i++)
            {
                int a,b,c;
                cin>>a>>b;
                edge[a].push_back(b);
                edge[b].push_back(a);
                cost[a].push_back(6);
                cost[b].push_back(6);
            }
            cin>>source;
            for(int i=1, j=0; i<=N; i++){
                if(i==source)
                    continue;
                destination = i;
                minimum_distance[j++] = bfs(source,destination);
            }

            for(int i=0; i<N-1; i++){
                cout<<minimum_distance[i]<<" ";
            }
            cout<<endl;
            /*edge[100].clear();
             edge[100].clear();
            cost[100].clear();
           cost[100].clear();*/

	}


}
